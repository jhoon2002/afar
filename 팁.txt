<인쇄용 폰트>
사용폰트: 스포카 한 산스(regular): Noto sans KR 을 경량화 시킨 버전이라고 함
출처: https://noonnu.cc/font_page/473
다운: https://spoqa.github.io/spoqa-han-sans/ko-KR/#download  에서 ttf서브셋 클릭!
     압축풀면 나오는 파일 중 SpoqaHanSansNeo-Regular.ttf (1,023kb) 사용
base64 인코딩: https://www.giftofspeed.com/base64-encoder/
      => 결과: vfs_font.js size: 1,363kb

<pagemake 사용법>
1. 설치: npm install pagemakef
2. html-to-pagemake 설치: npm install html-to-pagemake
3. @/assets 아래 pdfmakeUtil.js 생성

   // @/assets/pdfmakeUtil.js
  import * as pdfMake from 'pdfmake/build/pdfmake.min.js'
  import * as pdfFonts from '@/assets/vfs_fonts.js'
  pdfMake.vfs = pdfFonts.pdfMake.vfs
  pdfMake.fonts = {
      Roboto: {
          normal: 'NotoSansKR-Regular.otf',
          bold: 'NotoSansKR-Regular.otf',
          italics: 'NotoSansKR-Regular.otf',
          bolditalics: 'NotoSansKR-Regular.otf',
      }
  }

  export default pdfMake

----------
4. 아래 부분의 폰트 파일명만 바꿔줌(사실 안바꿔도 그만),
   'Roboto'라는 폰트 명칭은 놔두자. 왜냐면 수정할 경우 pdfmake/build/pdfmake.min.js 를
   찾아 들어가 'Roboto'를 모두 바꿔야 하기에 비권장
         Roboto: {
          normal: 'SpoqaHanSansNeo-Regular.ttf',
          bold: 'SpoqaHanSansNeo-Regular.ttf',
          italics: 'SpoqaHanSansNeo-Regular.ttf',
          bolditalics: 'SpoqaHanSansNeo-Regular.ttf',
      }
-------------
5. @/assets 아래 vfs_fonts.js 생성

// @/assets/vfs_fonts.js
this.pdfMake = this.pdfMake || {}; this.pdfMake.vfs = {
    "NotoSansKR-Regular.otf": ""
};
----------------
여기서 4.를 수행해서 폰트 파일명을 변경했다면 같은 이름으로 변경
즉, "NotoSansKR-Regular.otf":를 "SpoqaHanSansNeo-Regular.ttf":으로 변경
(사실 폰트 파일명은 중요치 않고 4,5에서 무엇이든 폰트 파일명이 일치만 하면 되면 될것임)

6. : "" 여기 따옴표 부분에 SpoqaHanSansNeo-Regular.ttf를 base64로 인코딩한 결과를 복사해서 넣을 것
   * base64 인코딩 사이트: https://www.giftofspeed.com/base64-encoder/

7. vue 파일 생성
<template>
<div>
    <v-btn @click="pdfgen">미리보기</v-btn>
    <v-btn @click="pdfgen('download')">다운로드</v-btn>
    <div ref="printArea">
        <span>인쇄할 내용</span>
        ...
    </div>
     <iframe id="pdfId" style="height:1000px; width: 500px; border: 1px solid grey; background: white"></iframe>
<div>
</template>
<script>
    import pdfMake from '@/assets/pdfmakeUtil.js'
    import htmlToPdfmake from "html-to-pdfmake"
    export default {

        methods: {
            pdfgen(flag) {
                //console.log(this.$refs.printArea.innerHTML)
                let html = htmlToPdfmake(this.$refs.printArea.innerHTML)

                let docDefinition = {
                    content: html
                }
                if (flag == "download") {
                    pdfMake.createPdf(docDefinition).download("optionalName.pdf")
                } else {
                    pdfMake.createPdf(docDefinition).getDataUrl(function(outDoc) {
                        document.getElementById('pdfId').src = outDoc;
                    })
                }
            }
        }

    }

<pdfmake Style properties>
font: string: name of the font
fontSize: number: size of the font in pt
fontFeatures: string[]: array of advanced typographic features supported in TTF fonts (supported features depend on font file)
lineHeight: number: the line height (default: 1)
bold: boolean: whether to use bold text (default: false)
italics: boolean: whether to use italic text (default: false)
alignment: string: (‘left’ or ‘center’ or ‘right’) the alignment of the text
characterSpacing: number: size of the letter spacing in pt
color: string: the color of the text (color name e.g., ‘blue’ or hexadecimal color e.g., ‘#ff5500’)
background: string the background color of the text
markerColor: string: the color of the bullets in a buletted list
decoration: string: the text decoration to apply (‘underline’ or ‘lineThrough’ or ‘overline’)
decorationStyle: string: the style of the text decoration (‘dashed’ or ‘dotted’ or ‘double’ or ‘wavy’)
decorationColor: string: the color of the text decoration, see color

table
headerRows: 1,
widths: [ '*', 'auto', 100, '*' ],
body: []

Table-cell properties
fillColor: string: the background color of a table cell
fillOpacity: string: the background opacity of a table cell

스타일 프로퍼티 사용법
1. 태그에 class="클래스명"
2. 도큐멘트 정의에 추가
let docDefinition = {
    content: ,
    pageBreakBefore: ,
    pageSize: ,
    pageMargins: ,
    styles: {
       '클래스명': {
            스타일프로퍼티: 값,
            스타일프로퍼티: 값,
            스타일프로퍼티: 값,
       },
    }
}

테이블 프로퍼티 등 사용법
<tabel data-pdfmake="{  &quot;테이블 프로퍼티 &quot;: 밸류 }">
(') 대신 ( &quot;) 사용

<html-to-pdfmake>
{
    b: {bold:true},
    strong: {bold:true},
    u: {decoration:'underline'},
    s: {decoration: 'lineThrough'},
    em: {italics:true},
    i: {italics:true},
    h1: {fontSize:24, bold:true, marginBottom:5},
    h2: {fontSize:22, bold:true, marginBottom:5},
    h3: {fontSize:20, bold:true, marginBottom:5},
    h4: {fontSize:18, bold:true, marginBottom:5},
    h5: {fontSize:16, bold:true, marginBottom:5},
    h6: {fontSize:14, bold:true, marginBottom:5},
    a: {color:'blue', decoration:'underline'},
    strike: {decoration: 'lineThrough'},
    p: {margin:[0, 5, 0, 10]},
    ul: {marginBottom:5},
    li: {marginLeft:5},
    table: {marginBottom:5},
    th: {bold:true, fillColor:'#EEEEEE'}
}

::: defaultStyles 바꾸는 방법:::

To make it work, you have to either delete the default styles(<=== 이게 중요),
or change it with a new value. Starting v1.1.0, an option parameter is available as a second parameter.
Example: you want <li> to not have a margin-left, and <a> to be 'purple' and without 'underline' style:

var html = htmlToPdfmake('<ul><li>this is <a href="...">a link</a></li><li>another item</li><li class="with-margin">3rd item with a margin</li></ul>', {
  defaultStyles:{ // change the default styles
    a:{ // for <A>
      color:'purple', // all links should be 'purple'
      decoration:'' // remove underline <== 이게 중요
    },
    li:'' // remove all default styles for <LI>
  }
});

var docDefinition = {
 content: [
   html
 ],
 styles:{
   'with-margin':{
     marginLeft: 30 // apply a margin with the specific class is used
   }
 }
};

----------------------------
before tiptap-vuetify
"tiptap": "^1.32.1",
"tiptap-extensions": "^1.35.1",


-----------------------------
$forceUpdate 로 화면을 강제로 갱신하는 방법 있음

==========================================
자바스크립트 (출처: https://www.youtube.com/watch?v=s1vpVCrT8f4 / 자바스크립트 11. 비동기 처리의 시작 콜백 이해하기, 콜백 지옥 체험)

ㅇ hoisting* 이후, synchronous 하게 실행되는 스크립트
   *hoisting: const, let, function 등 변수 선언문을 의미, 이것을 최상단에서 먼저 실행


PROMISE

1. producer
const somefunc = new Promise( (resolve, reject ) => {
   //네트워크 통신 등 헤비한 작업
   cosn ㅋㅋㅋ = "결과값"
   setTimeout(()=> {
       resolve(ㅋㅋㅋ)
       또는 reject( new Error("실패요~") )
   }, 1000)
}

2. consumer
somefunc
.then( value => {              //promise에 resolve 콜백 함수를 등록, 다시 promise 리턴(체인)
                               //즉 resolve = value => { ~~~ }
   console.log(value)
}
.catch( error => {            //리턴 받은(체인) promise에 reject 콜백함수를 등록
                              //즉 reject = value => { ~~~~ }
    console.log(error)
}
.finally( () => {
   console.log("최종..처리")
}

(예제: then 뒤에 또 then을 쓰는 경우 앞의 then의 return 값을 받아온다.)

const fetchNumber = new Promise((resolve, reject) => {
    setTimeout(()=> resolve(1), 1000)
})

fetchNumber
.then(num => num*2) //여기의 return 즉, num*2이 값을 다음 then의 num 에서 받아옴
.then(num => num*3)
.then(num => {  //promise도 return 가능
    return new Promise((resolve, reject) => {
        setTImeout(() => resolve(num - 1), 1000)
    }
}
.then(num => console.log(num))


(예제: promise 활용)
const getHen = () =>
  new Promise((resolve, reject) => {
     setTimeout(() => resolve("닭"), 1000)
  })

const getEgg = hen =>
  new Promise((resolve, reject) => {
     setTimeout(() => resolve(`${hen} => '계란'`), 1000)
  })

const cook = egg =>
   new Promise((resolve, reject) => {
      setTimeout(()=> resolve(`${egg}=> '프라이팬'`), 1000)
   })

 getHen()
 .then(hen => getEgg(hen)) ====> 약식 .then(getEgg) 콜백 함수를 전달할때 받아온 value를 다른 함수로 바로 하나를 호출하는 경우는 생략 가능
 .then(egg => cook(egg))  =====> then(cook)
 .then(meal => console.log(meal))  ====> then(console.log)

 팁, 프리티어에서
 getHen().then(getEgg).then(cook).then(console.log) 이렇게 한줄로 만들어 버리면
 getHen() 다음에 '//'을 입력하면 줄이 나뉨

 getHen() //
 .then~~
 .then~~

에러 핸들링
getHen()
.then(getEgg)
.catch(error => {
   return "빵"  //계란 받아오는 거 실패시, 빵으로 대체하면 전체 체인은 유지됨
}
.then~~~

만약 제일 마지막에 catch 를 쓰면 전체 에러 핸들링이 됨

<promise 병렬실행>
* 동기 실행
* 비동기 함수
* 비동기 함수
* 동시 실행

=> 직렬적으로 실행은 각각 await 주면 되는데
병렬적으로 하려면? 즉 비동기 함수 2개를 동시에 실행하고 다음 함수부터는 동기적으로 실행하려면?
아래 처럼 사용

=> promise 함수(비동기 함수)를 병렬적으로 실행하려면 아래처럼(각각 비동기로 작동)

Promise.all ( [getApple(), getBanana()] ).then(fruits => ....)


=============================

Primitive type => number, string, boolean, null, undefined  => 복사할 경우 deep copy = 값 복사
Obbject type => object(array, object, etc..all)  => 복사할 경우 reference 만.. = 주소 복사

------------------------------

<arrow(=>) 함수>
anonymous 함수는 arrow로 사용 가능
ex)
array.forEach( function( a, index ) {
    return abc(a)
}
여기서 function이 anonymous 함수임, 즉 이름이 없음
array.forEach( (a, index) => {
    return abc(a)
}

만약 콜백함수의 { } 안의 내용이 한줄이면 { }를 생략하고 이렇게 축약 가능
array.forEach( (a, index) => return abc(a) )

만약, 그 한줄이 return 이면 return 생략 가능
array.forEach( (a, index) => abc(a) )

만약, 받아오는 인자가 한개 리턴 함수의 인자도 같은 거라면, 이렇게 축약 가능
array.forEach( (a) => abc(a) ) 라면,
array.forEach( abc )

-----------------

배열 관련 꼭 필요한 api 10가지
join
split
reverse
slice
find
filter
map
some
reduce
응용 ex) const result = students
         .map((student) => student.score)
         .filter((score) => score >= 50)
         .join()
sort

--------------------

Vue 안 ( data, watch 등 ) 에서는 화살표 함수 사용 불가,
화살표 함수는 상위 컨텍스트에서 바인딩 되므로 Vue 인스턴스가 아님.

출처: https://stackoverflow.com/questions/42242682/this-is-undefined-in-vue-js-watcher